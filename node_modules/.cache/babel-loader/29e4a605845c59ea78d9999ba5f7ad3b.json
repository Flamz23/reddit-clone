{"remainingRequest":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\src\\scripts\\postLoader.js","dependencies":[{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\src\\scripts\\postLoader.js","mtime":1636859031945},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\babel.config.js","mtime":1635784453823},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL2RhbWlwL0RvY3VtZW50cy9qYXZhc2NyaXB0L1JFRERJVENMT05FL3JlZGRpdC1jbG9uZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKCnZhciBzbm9vd3JhcCA9IHJlcXVpcmUoJ3Nub293cmFwJyk7Cgp2YXIgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpOwoKdmFyIGNyZWRlbnRpYWxzID0gcmVxdWlyZSgnLi9jcmVkLmpzb24nKTsgLy8gaW1wb3J0IGNyZWRlbnRpYWxzCgoKdmFyIHJlcXVlc3RlciA9IG5ldyBzbm9vd3JhcCh7CiAgdXNlckFnZW50OiBjcmVkZW50aWFscy51c2VyQWdlbnQsCiAgY2xpZW50SWQ6IGNyZWRlbnRpYWxzLmNsaWVudElkLAogIGNsaWVudFNlY3JldDogY3JlZGVudGlhbHMuY2xpZW50U2VjcmV0LAogIHVzZXJuYW1lOiBjcmVkZW50aWFscy51c2VybmFtZSwKICBwYXNzd29yZDogY3JlZGVudGlhbHMucGFzc3dvcmQKfSk7CnZhciBsb2FkZXIgPSB7fTsKbG9hZGVyLmdldEhvdCA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgdmFyIHJlcSwgcmV0LCBpLCBpY29SZXF1ZXN0OwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHJlcSA9IHJlcXVlc3Rlci5nZXRIb3QoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICAgIH0pOwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICByZXR1cm4gcmVxOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgICByZXQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgX2NvbnRleHQucHJldiA9IDQ7CiAgICAgICAgICBpID0gMDsKCiAgICAgICAgY2FzZSA2OgogICAgICAgICAgaWYgKCEoaSA8IHJldC5sZW5ndGgpKSB7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCEodHlwZW9mIHJldFtpXS5zdWJyZWRkaXRfbmFtZV9wcmVmaXhlZCAhPT0gInVuZGVmaW5lZCIpKSB7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgaWNvUmVxdWVzdCA9IHRoaXMuZ2V0U3VicmVkZGl0SWNvbihyZXRbaV0uc3VicmVkZGl0X25hbWVfcHJlZml4ZWQpOwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgcmV0dXJuIGljb1JlcXVlc3Q7CgogICAgICAgIGNhc2UgMTE6CiAgICAgICAgICByZXRbaV0uc3VicmVkZGl0X1N1Ykljb24gPSBfY29udGV4dC5zZW50OwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICByZXRbaV0uc3VicmVkZGl0X1N1Ykljb24gPSAiIjsKCiAgICAgICAgY2FzZSAxNToKICAgICAgICAgIGkrKzsKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgMTg6CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjM7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAyMDoKICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyMDsKICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oNCk7CiAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsKCiAgICAgICAgY2FzZSAyMzoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJldCk7CgogICAgICAgIGNhc2UgMjQ6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9LCBfY2FsbGVlLCB0aGlzLCBbWzQsIDIwXV0pOwp9KSk7Cgpsb2FkZXIuZ2V0U3VicmVkZGl0SWNvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihuYW1lKSB7CiAgICB2YXIgcmV0OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcmV0ID0gYXhpb3MuZ2V0KCJodHRwczovL3d3dy5yZWRkaXQuY29tLyIuY29uY2F0KG5hbWUsICIvYWJvdXQuanNvbiIpKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICByZXR1cm4gcmVzLmRhdGEuZGF0YS5pY29uX2ltZzsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIHJldDsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDIuc2VudCk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgpsb2FkZXIuZ2V0U3Vic2NyaXB0aW9ucyA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogIHZhciByZXQ7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHJldCA9IHJlcXVlc3Rlci5nZXRTdWJzY3JpcHRpb25zKCkuZmV0Y2hBbGwoKTsKICAgICAgICAgIGNvbnNvbGUubG9nKHJldCk7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgcmV0KTsKCiAgICAgICAgY2FzZSAzOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgfQogICAgfQogIH0sIF9jYWxsZWUzKTsKfSkpOwpleHBvcnQgZGVmYXVsdCBsb2FkZXI7"},{"version":3,"sources":["C:/Users/damip/Documents/javascript/REDDITCLONE/reddit-clone/src/scripts/postLoader.js"],"names":["snoowrap","require","axios","credentials","requester","userAgent","clientId","clientSecret","username","password","loader","getHot","req","then","res","ret","i","length","subreddit_name_prefixed","icoRequest","getSubredditIcon","subreddit_SubIcon","console","error","name","get","data","icon_img","getSubscriptions","fetchAll","log"],"mappings":";;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,aAAD,CAAzB,C,CAAyC;;;AAEzC,IAAMG,SAAS,GAAG,IAAIJ,QAAJ,CAAa;AAC3BK,EAAAA,SAAS,EAAEF,WAAW,CAACE,SADI;AAE3BC,EAAAA,QAAQ,EAAEH,WAAW,CAACG,QAFK;AAG3BC,EAAAA,YAAY,EAAEJ,WAAW,CAACI,YAHC;AAI3BC,EAAAA,QAAQ,EAAEL,WAAW,CAACK,QAJK;AAK3BC,EAAAA,QAAQ,EAAEN,WAAW,CAACM;AALK,CAAb,CAAlB;AAQA,IAAIC,MAAM,GAAG,EAAb;AAEAA,MAAM,CAACC,MAAP,wEAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,UAAAA,GADQ,GACFR,SAAS,CAACO,MAAV,GAAmBE,IAAnB,CAAwB,UAAAC,GAAG,EAAI;AAAE,mBAAOA,GAAP;AAAY,WAA7C,CADE;AAAA;AAAA,iBAEIF,GAFJ;;AAAA;AAERG,UAAAA,GAFQ;AAAA;AAMCC,UAAAA,CAND,GAMK,CANL;;AAAA;AAAA,gBAMQA,CAAC,GAAGD,GAAG,CAACE,MANhB;AAAA;AAAA;AAAA;;AAAA,gBAOA,OAAOF,GAAG,CAACC,CAAD,CAAH,CAAOE,uBAAd,KAA0C,WAP1C;AAAA;AAAA;AAAA;;AAQIC,UAAAA,UARJ,GAQiB,KAAKC,gBAAL,CAAsBL,GAAG,CAACC,CAAD,CAAH,CAAOE,uBAA7B,CARjB;AAAA;AAAA,iBASiCC,UATjC;;AAAA;AASAJ,UAAAA,GAAG,CAACC,CAAD,CAAH,CAAOK,iBATP;AAAA;AAAA;;AAAA;AAWAN,UAAAA,GAAG,CAACC,CAAD,CAAH,CAAOK,iBAAP,GAA2B,EAA3B;;AAXA;AAMwBL,UAAAA,CAAC,EANzB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeRM,UAAAA,OAAO,CAACC,KAAR;;AAfQ;AAAA,2CAmBLR,GAnBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAsBAL,MAAM,CAACU,gBAAP;AAAA,sEAA0B,kBAAgBI,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBT,YAAAA,GADkB,GACZb,KAAK,CACVuB,GADK,kCAEwBD,IAFxB,kBAILX,IAJK,CAIA,UAACC,GAAD,EAAS;AACX,qBAAOA,GAAG,CAACY,IAAJ,CAASA,IAAT,CAAcC,QAArB;AACH,aANK,CADY;AAAA;AAAA,mBAQTZ,GARS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAWAL,MAAM,CAACkB,gBAAP,wEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBb,UAAAA,GADkB,GACZX,SAAS,CAACwB,gBAAV,GAA6BC,QAA7B,EADY;AAEtBP,UAAAA,OAAO,CAACQ,GAAR,CAAYf,GAAZ;AAFsB,4CAGfA,GAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;AAMA,eAAeL,MAAf","sourcesContent":["const snoowrap = require('snoowrap');\r\nconst axios = require('axios');\r\nvar credentials = require('./cred.json') // import credentials\r\n\r\nconst requester = new snoowrap({\r\n    userAgent: credentials.userAgent,\r\n    clientId: credentials.clientId,\r\n    clientSecret: credentials.clientSecret,\r\n    username: credentials.username,\r\n    password: credentials.password\r\n});\r\n\r\nvar loader = {};\r\n\r\nloader.getHot = async function () {\r\n    let req = requester.getHot().then(res => { return res });\r\n    let ret = await req;\r\n\r\n    // loop through post array, if defined fill icon url property\r\n    try {\r\n        for (let i = 0; i < ret.length; i++) {\r\n            if (typeof ret[i].subreddit_name_prefixed !== \"undefined\") {\r\n                let icoRequest = this.getSubredditIcon(ret[i].subreddit_name_prefixed);\r\n                ret[i].subreddit_SubIcon = await icoRequest;\r\n            } else {\r\n                ret[i].subreddit_SubIcon = \"\";\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n\r\n\r\n    return ret;\r\n}\r\n\r\nloader.getSubredditIcon = async function (name) {\r\n    let ret = axios\r\n        .get(\r\n            `https://www.reddit.com/${name}/about.json`\r\n        )\r\n        .then((res) => {\r\n            return res.data.data.icon_img;\r\n        });\r\n    return await ret;\r\n}\r\n\r\nloader.getSubscriptions = async function () {\r\n    let ret = requester.getSubscriptions().fetchAll();\r\n    console.log(ret);\r\n    return ret\r\n}\r\n\r\nexport default loader"]}]}
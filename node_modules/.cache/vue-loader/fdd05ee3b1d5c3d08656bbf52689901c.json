{"remainingRequest":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\src\\components\\ObserverComponent.vue?vue&type=template&id=0bdd0f47","dependencies":[{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\src\\components\\ObserverComponent.vue","mtime":1636764724464},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9Im9ic2VydmVyIiAvPg0K"},{"version":3,"sources":["C:\\Users\\damip\\Documents\\javascript\\REDDITCLONE\\reddit-clone\\src\\components\\ObserverComponent.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC","file":"C:/Users/damip/Documents/javascript/REDDITCLONE/reddit-clone/src/components/ObserverComponent.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"observer\" />\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: [\"options\"],\r\n  data: () => ({\r\n    observer: null,\r\n  }),\r\n  mounted() {\r\n    const options = this.options || {};\r\n    this.observer = new IntersectionObserver(([entry]) => {\r\n      if (entry && entry.isIntersecting) {\r\n        this.$emit(\"intersect\");\r\n      }\r\n    }, options);\r\n\r\n    this.observer.observe(this.$el);\r\n  },\r\n  unmounted() {\r\n    this.observer.disconnect();\r\n  },\r\n};\r\n</script>"]}]}